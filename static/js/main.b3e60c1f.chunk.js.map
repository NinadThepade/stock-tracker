{"version":3,"sources":["App.js","components/StockRow/StockRow.js","components/StockListContainer/StockListContainer.js","serviceWorker.js","index.js"],"names":["socket","StockRow","stock","useState","date","setDate","time","setTime","useEffect","dtArray","Date","dateTime","toLocaleString","split","className","stockName","isNewPriceHigher","stockPrice","StockListContainer","data","setData","test","localforage","iterate","value","push","then","catch","err","console","log","map","index","key","App","ENDPOINT","io","on","event","JSON","parse","getItem","setItem","now","emit","off","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sPAQIA,E,iFCiBWC,G,MArBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAAW,EACJC,mBAAS,IADL,mBACrBC,EADqB,KACfC,EADe,OAEJF,mBAAS,IAFL,mBAErBG,EAFqB,KAEfC,EAFe,KAW5B,OAPAC,qBAAU,WACR,IACIC,EADK,IAAIC,KAAKR,EAAMS,UAAUC,iBACjBC,MAAM,KACvBR,EAAQI,EAAQ,IAChBF,EAAQE,EAAQ,MAChB,CAACP,IAGD,kBAAC,WAAD,KACE,wBAAIY,UAAU,cAAeZ,EAAMa,WACnC,wBAAID,UAAS,sBAAiBZ,EAAMc,iBAAmB,qBAAuB,sBAAyBd,EAAMe,YAC7G,wBAAIH,UAAU,cAAeV,GAC7B,wBAAIU,UAAU,cAAeR,MCuBpBY,EAvCY,WAAO,IAAD,EACPf,mBAAS,IADF,mBACxBgB,EADwB,KAClBC,EADkB,KAkB/B,OAfAZ,qBAAU,WACR,IAAIa,EAAO,GACXC,IAAYC,SAAQ,SAAAC,GAGlBH,EAAKI,KAAKD,MACTE,MAAK,WAENN,EAAQC,MACPM,OAAM,SAASC,GAEhBC,QAAQC,IAAIF,QAEd,CAACT,IAGD,2BAAOL,UAAU,mBACf,+BACE,4BACA,0CACA,2CACA,iDACA,mDAGF,+BACGK,EAAKY,KAAI,SAAC7B,EAAO8B,GAAR,OACV,wBAAIC,IAAKD,GACP,kBAAC,EAAD,CAAU9B,MAAOA,W,MFqBZgC,MA9Cf,WAAgB,IAAD,EACW/B,mBAAS,IADpB,mBACNgB,EADM,KACAC,EADA,KAEPe,EAAW,4CAqCjB,OAnCA3B,qBAAU,WA4BR,OA3BAR,EAASoC,IAAGD,IAELE,GAAG,WAAW,SAACC,GACpBT,QAAQC,IAAIQ,GACZ,IAEIjB,EAFakB,KAAKC,MAAMF,GAERP,KAAI,SAAA7B,GACtB,IAAIc,EAcJ,OAZAM,IAAYmB,QAAQvC,EAAM,IAAIwB,MAAK,SAAAF,GAEjCR,EAAoBQ,EAAMP,WAAaf,EAAM,GAG7CoB,IAAYoB,QAAQxC,EAAM,GAAI,CAC5B,UAAaA,EAAM,GACnB,WAAcA,EAAM,GACpB,SAAYQ,KAAKiC,MACjB,iBAAoB3B,IACnBW,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,SAC3BD,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MACrB1B,KAGTkB,EAAQC,MAGH,WACLrB,EAAO4C,KAAK,cAEZ5C,EAAO6C,SAER,CAACV,IAGF,yBAAKrB,UAAU,OACb,kBAAC,EAAD,CAAoBK,KAAMA,MGvCZ2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAkC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.b3e60c1f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport io from \"socket.io-client\";\nimport {default as localforage} from 'localforage'\n\nimport StockListContainer from './components/StockListContainer/StockListContainer'\n\nimport './App.css';\n\nlet socket;\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const ENDPOINT = 'https://react-proxy-server.herokuapp.com/';\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n\n    socket.on('message', (event) => {\n      console.log(event)\n      const response = JSON.parse(event);\n\n      let test = response.map(stock => {\n        let isNewPriceHigher;\n        // check if the item already exists in DB\n        localforage.getItem(stock[0]).then(value => {\n          // This code runs once the value has been loaded from the offline store.\n          isNewPriceHigher = (value.stockPrice < stock[1])\n\n          // set the item to the db\n          localforage.setItem(stock[0], {\n            'stockName': stock[0], \n            'stockPrice': stock[1], \n            'dateTime': Date.now(), \n            'isNewPriceHigher': isNewPriceHigher \n          }).catch(err => console.log(err))\n        }).catch(err => console.log(err))\n        return stock\n      })\n\n      setData(test);\n    })\n\n    return () => {\n      socket.emit('disconnect')\n\n      socket.off()\n    }\n  }, [ENDPOINT]);\n\n  return (\n    <div className=\"App\">\n      <StockListContainer data={data} />\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState, useEffect, Fragment } from 'react'\n\nimport './StockRow.css'\n\nconst StockRow = ({stock}) => {\n  const [date, setDate] = useState('');\n  const [time, setTime] = useState('');\n  \n  useEffect(() => {\n    let dt = new Date(stock.dateTime).toLocaleString();\n    let dtArray = dt.split(',');\n    setDate(dtArray[0])\n    setTime(dtArray[1])\n  },[stock])\n\n  return (\n    <Fragment>\n      <td className=\"stock-name\">{ stock.stockName }</td>\n      <td className={`stock-price ${stock.isNewPriceHigher ? \"stock-price-higher\" : \"stock-price-lower\"}`}>{ stock.stockPrice }</td>\n      <td className=\"stock-date\">{ date }</td>\n      <td className=\"stock-time\">{ time }</td>\n    </Fragment>\n  )\n}\n\nexport default StockRow","import React, { useState, useEffect } from 'react'\nimport {default as localforage} from 'localforage'\nimport StockRow from '../StockRow/StockRow'\n\nconst StockListContainer = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    let test = [];\n    localforage.iterate(value => {\n      // Resulting key/value pair -- this callback\n      // will be executed for every item in the database.\n      test.push(value)\n    }).then(function() {\n      // Rerender once the iteration has completed else it will go into infinite loop\n      setData(test)\n    }).catch(function(err) {\n      // This code runs if there were any errors\n      console.log(err);\n    });\n  },[data]);\n\n  return (\n    <table className=\"stock-container\">\n      <thead>\n        <tr>\n        <th>Stock Code</th>\n        <th>Stock Price</th>\n        <th>Last Updated Date</th>\n        <th>Last Updated Time</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((stock, index) => (\n        <tr key={index}>\n          <StockRow stock={stock} />\n        </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nexport default StockListContainer\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}